From 7ef4824a7f2ba81f206d8cdbeaab3acf9da25c3d Mon Sep 17 00:00:00 2001
From: Hunter Kelly <hunter.kelly@zalando.ie>
Date: Fri, 4 Dec 2015 18:53:48 +0000
Subject: [PATCH 2/2] some playing; e206

---
 project.clj        |  2 +-
 src/euler/e119.clj | 23 +++++++++++++-
 src/euler/e206.clj | 91 ++++++++++++++++++++++++++++++++++++++++++++++++++++++
 src/euler/util.clj | 10 ++++++
 4 files changed, 124 insertions(+), 2 deletions(-)
 create mode 100644 src/euler/e206.clj

diff --git a/project.clj b/project.clj
index 8288206..7c367a5 100644
--- a/project.clj
+++ b/project.clj
@@ -13,5 +13,5 @@
                  [incanter/incanter-core "1.5.6"]
                  [org.clojure/core.cache "0.6.4"]
                  [clatrix "0.5.0"]
-                 [net.mikera/core.matrix "0.44.0"]
+                 [net.mikera/core.matrix "0.46.0"]
                  ])
diff --git a/src/euler/e119.clj b/src/euler/e119.clj
index 4de1529..0cfec5e 100644
--- a/src/euler/e119.clj
+++ b/src/euler/e119.clj
@@ -157,7 +157,7 @@ in the cycle of digits when raising a number to multiple powers"
 
 (defn e119-pow-seq
   ([] (drop-while #(< (first %) 10)
-                  (e119-pow-seq (apply h/create-heap (map #(vector (* % %) % 2) (range 2 100))))))
+                  (e119-pow-seq (apply h/create-heap (mapv #(vector (* % %) % 2) (range 2 100))))))
   ([heap]
    (let [t (h/find-min heap)]
      (cons t (lazy-seq (e119-pow-seq (h/insert (h/delete-min heap) (next-pow t))))))))
@@ -169,6 +169,27 @@ in the cycle of digits when raising a number to multiple powers"
 ;; (time (take-n-e119 30 (fast-e119-seq)))
 ;; [248155780267521 63 8]
 ;; "Elapsed time: 15.651225 msecs"
+;; (nth (fast-e119-seq) 29)
+;; (quick-bench (nth (fast-e119-seq) 29))
 
 ;; Wow, super fast.  Didn't even go near 300.  Running it with 100
 ;; instead of 300 - 12 millis.  More than enough, highest seen was 68.
+
+
+;; Transducers anyone?
+
+(defn e119-pow-seq-t
+  ([] (drop-while #(< (first %) 10)
+                  (e119-pow-seq (apply h/create-heap (mapv #(vector (* % %) % 2) (range 2 100))))))
+  ([heap]
+   (let [t (h/find-min heap)]
+     (cons t (lazy-seq (e119-pow-seq (h/insert (h/delete-min heap) (next-pow t))))))))
+
+(defn fast-e119-seq-t []
+  (sequence (filter e119?) (e119-pow-seq-t)))
+
+;; (quick-bench (nth (fast-e119-seq-t) 29))
+
+
+;; (bench (nth (fast-e119-seq) 29))
+;; (bench (nth (fast-e119-seq-t) 29))
diff --git a/src/euler/e206.clj b/src/euler/e206.clj
new file mode 100644
index 0000000..aadbd05
--- /dev/null
+++ b/src/euler/e206.clj
@@ -0,0 +1,91 @@
+(ns euler.e206
+  (:use [incanter.interpolation :only [interpolate]])
+  (:require [euler.util :as util]
+            [clojure.math.combinatorics :as c]
+            [clojure.set :as sets]))
+
+(defn e206int [v]
+  [(util/seq->int [1 (get v 0) 2 (get v 1) 3 (get v 2) 4 (get v 3) 5 (get v 4) 6 (get v 5) 7 (get v 6) 8 (get v 7) 9 3 0])
+   (util/seq->int [1 (get v 0) 2 (get v 1) 3 (get v 2) 4 (get v 3) 5 (get v 4) 6 (get v 5) 7 (get v 6) 8 (get v 7) 9 7 0])])
+
+(def MIN 1020304050607080900)
+(def MAX 1929394959697989990)
+
+(defn e206-matches? [n]
+  (let [x (util/digits n)]
+    (and 
+     (>= n 1020304050607080900)
+     (<= n 1929394959697989990)
+     (= 9 (get x 16))
+     (= 8 (get x 14))
+     (= 7 (get x 12))
+     (= 6 (get x 10))
+     (= 5 (get x 8))
+     (= 4 (get x 6))
+     (= 3 (get x 4))
+     (= 2 (get x 2))
+     (= 1 (get x 0)))))
+
+(e206-matches? MIN)
+(e206-matches? MAX)
+
+
+(e206int [1 1 1 1 1 1 1 1 1])
+
+(= 1.1 (Math/floor 1.1))
+
+;; (time (->> (c/selections (range 10) 9)
+;;            (map vec)
+;;            (map e206int)
+;;            (filter util/square-of-int?)
+;;            first
+;;            (Math/sqrt)))
+
+;; "Elapsed time: 186457.447559 msecs"
+
+(defn e206t []
+  (time (let [xf  (comp (map vec)
+                        (mapcat e206int)
+                        (filter util/square-of-int?)
+                        (take 1))]
+          (Math/sqrt (first (into [] xf (c/selections (range 10) 8)))))))
+
+;; (e206t)
+;; "Elapsed time: 166394.184962 msecs"
+
+;; (/ (- (Math/floor (Math/sqrt (e206int (vec (repeat 9 9))))) (Math/floor (Math/sqrt (e206int (vec (repeat 9 0)))))) 50)
+
+(->> (range 10 990 10)
+     (map #(* % %))
+     (filter #(let [x (util/digits %)] (and (zero? (peek x)) (= 9 (get x (- (count x) 3))))))
+     (map #(Math/sqrt %)))
+
+(->> (range 10 990 10)
+     (map #(* % %))
+     (filter #(let [x (util/digits %)] (and (zero? (peek x)) (= 9 (get x (- (count x) 3))))))
+     (map #(Math/sqrt %)))
+
+
+(->> (range 0 10000000 100)
+     (mapcat #(vector (+ 30 %) (+ 70 %)))
+     (map #(* % %))
+     (filter #(let [x (util/digits %)] (and (zero? (peek x))
+                                            (= 9 (get x (- (count x) 3)))
+                                            (= 8 (get x (- (count x) 5)))
+                                            (= 7 (get x (- (count x) 7))))))
+     (map #(vector (let [y (util/digits (int (Math/sqrt %)))] (butlast (take-last 3 y))) (Math/sqrt %) %))
+     (map first)
+     (into #{}))
+
+(defn e206-gen
+  []
+  (let [min-root (int (Math/sqrt MIN))
+        max-root (inc (int (Math/sqrt MAX)))
+        start (* 100 (int (/ min-root 100)))
+        xf (comp (mapcat #(vector (+ 30 %) (+ 70 %)))
+                 (filter #(e206-matches? (* % %)))
+                 (take 1))]
+    (->> (into [] xf (range start max-root 100))
+         first)))
+
+;; (time (println (e206-gen)))
diff --git a/src/euler/util.clj b/src/euler/util.clj
index 0f1b665..cdc671c 100644
--- a/src/euler/util.clj
+++ b/src/euler/util.clj
@@ -266,6 +266,16 @@
 (defn digits [n]
   (mapv #(- (int %) (int \0)) (seq (str n))))
 
+(defn seq->int [s]
+  (loop [t 0 s s]
+    (if (empty? s)
+      t
+      (recur (+ (* 10 t) (first s)) (rest s)))))
+
+(defn square-of-int? [n]
+  (let [rt (Math/sqrt n)]
+    (and (= rt (Math/floor rt)) (= n (* rt rt)))))
+
 ;; Integer partitions -
 ;; https://en.wikipedia.org/wiki/Partition_(number_theory)#Algorithm
 
-- 
2.3.2 (Apple Git-55)

